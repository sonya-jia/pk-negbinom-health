---
title: "Idea 2"
author: "Sonya Eason"
format: pdf
editor: visual
---


```{r}
library(tidyverse)
library(patchwork)
library(lmerTest)
library(knitr)
library(broom)
```



```{r}
unemployment <- read_csv("data/Unemployment.csv")
price <- read_csv("data/Price and Availability Data.csv")
occupancy <- read_csv("data/Major Market Occupancy Data-revised.csv")
leases <- read_csv("data/Leases.csv")
income <- read_csv("data/ACSST5Y2023.S2411-Data.csv", skip = 1)
```

```{r}
# Filter columns whose names contain the word "computer" (case-insensitive)
income_filtered <- income[, grep("Computer", names(income), ignore.case = TRUE)]

# View the filtered dataframe
head(income_filtered)

cs <- income_filtered[,1]

tech <- data.frame(location = income$`Geographic Area Name`, income = cs)

colnames(tech)[2] <- "income"

```

```{r}
library(dplyr)

tech$GEOID <- c(
  "04013", "06037", "06059", "06073", "06075", "06085", "08031", "11001",
  "12057", "12086", "13121", "17031", "24017", "24510", "25025", "26163",
  "34013", "36061", "37119", "37183", "42101", "47037", "48113", "48201",
  "48439", "48453", "49035", "51059", "53033"
)

```
```{r}
library(tigris)
library(sf)
library(dplyr)
library(ggplot2)
library(stringr)
```

```{r}
library(sf)


shapefile_path <- "data/cb_2022_us_county_5m.shp"
counties_sf <- st_read(shapefile_path)

```

```{r}

# Join your data with the shapefile
map_df <- counties_sf %>%
  left_join(tech, by = "GEOID") %>%
  filter(!is.na(income)) # filter only counties in your data

# Plot
ggplot(map_df) +
  geom_sf(aes(fill = income), color = NA) +
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90") +
  theme_minimal() +
  labs(title = "Income by County", subtitle = "Tech-focused counties in the US")
```

```{r}
# Join your data with the shapefile
map_df <- counties_sf %>%
  left_join(tech, by = "GEOID") %>%
  filter(!is.na(income))  # filter only counties in your data

# Plot with bolded black titles and labels
ggplot(map_df) +
  geom_sf(aes(fill = income), color = NA) +
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90") +
  theme_minimal(base_size = 15) +  # Set base size for consistency
  labs(
    title = "Income by County", 
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme(
    plot.title = element_text(face = "bold", size = 20, color = "black", hjust = 0.5),
    plot.subtitle = element_text(face = "bold", size = 14, color = "black", hjust = 0.5),
    plot.caption = element_text(face = "bold", size = 10, color = "black", hjust = 1),
    axis.text = element_blank(),  # Removing axis text
    axis.title = element_blank(),  # Removing axis titles
    legend.title = element_text(face = "bold", color = "black"),
    legend.text = element_text(color = "black"),
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10),  # Add some space around the plot
    plot.background = element_rect(fill = "white")  # Clean white background
  )

```




```{r}
ggplot(map_df) +
  geom_sf(aes(fill = income), color = "white", size = 0.1) +  # Adding borders with white color
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90") +  # Better color scale
  labs(
    title = "Income by County",
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme_minimal(base_size = 15) +  # Bigger font size for better readability
  theme(
    plot.title = element_text(face = "bold", size = 20, hjust = 0.5, color = "darkblue"),
    plot.subtitle = element_text(size = 14, hjust = 0.5, color = "darkblue"),
    plot.caption = element_text(size = 10, hjust = 1, color = "gray50"),
    axis.text = element_blank(),
    axis.title = element_blank(),
    legend.position = "bottom",  # Move the legend to the bottom
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 12),
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10)  # Add some space around the plot
  ) +
  # Add a border around the plot
  coord_sf() +
  theme(plot.background = element_rect(fill = "white"))
```

```{r}
ggplot(map_df) +
  geom_sf(aes(fill = income), color = "white", size = 0.1) +  # Adding borders with white color
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90") +  # Better color scale
  labs(
    title = "Income by County",
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme_minimal(base_size = 15) +  # Bigger font size for better readability
  theme(
    plot.title = element_text(face = "bold", size = 20, hjust = 0.5, color = "darkblue"),
    plot.subtitle = element_text(size = 14, hjust = 0.5, color = "darkblue"),
    plot.caption = element_text(size = 10, hjust = 1, color = "gray50"),
    axis.text = element_blank(),
    axis.title = element_blank(),
    legend.position = "bottom",  # Move the legend to the bottom
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 12, angle = 45),  # Tilt legend labels by 45 degrees
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10)  # Add some space around the plot
  ) +
  # Add a border around the plot
  coord_sf() +
  theme(plot.background = element_rect(fill = "white"))

```





```{r}
ggplot(map_df) +
  geom_sf(aes(fill = income), color = "white", size = 0.1) +  # Adding borders with white color
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90", 
                       limits = c(min(map_df$income, na.rm = TRUE), max(map_df$income, na.rm = TRUE)),
                       oob = scales::squish) +  # Adjust color limits and squish outliers
  labs(
    title = "Income by County",
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme_minimal(base_size = 15) +  # Bigger font size for better readability
  theme(
    plot.title = element_text(face = "bold", size = 20, hjust = 0.5, color = "darkblue"),
    plot.subtitle = element_text(size = 14, hjust = 0.5, color = "darkblue"),
    plot.caption = element_text(size = 10, hjust = 1, color = "gray50"),
    axis.text = element_blank(),
    axis.title = element_blank(),
    legend.position = "bottom",  # Move the legend to the bottom
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 12),
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10),  # Add some space around the plot
    plot.background = element_rect(fill = "white")  # Clean white background
  ) +
  # Optionally add county labels to show income (you can remove or adjust this)
  geom_sf_text(aes(label = round(income, 0)), size = 3, color = "black", 
               fontface = "bold", check_overlap = TRUE) +
  coord_sf()

```



```{r}
biz_income_filtered <- income[, grep("Business", names(income), ignore.case = TRUE)]

# View the filtered dataframe
head(biz_income_filtered)

biz <- income_filtered[,1]
business <- data.frame(location = income$`Geographic Area Name`, income = biz)

colnames(business)[2] <- "income"

```

```{r}
library(dplyr)

# Mapping of counties to cities
county_to_city <- c(
  "Maricopa County, Arizona" = "Phoenix",
  "Los Angeles County, California" = "Los Angeles",
  "Orange County, California" = "Orange County",
  "San Diego County, California" = "San Diego",
  "San Francisco County, California" = "San Francisco",
  "Santa Clara County, California" = "South Bay/San Jose",
  "Denver County, Colorado" = "Denver",
  "District of Columbia, District of Columbia" = "Washington D.C.",
  "Hillsborough County, Florida" = "Tampa",
  "Miami-Dade County, Florida" = "South Florida",
  "Fulton County, Georgia" = "Atlanta",
  "Cook County, Illinois" = "Chicago",
  "Charles County, Maryland" = "Southern Maryland",
  "Baltimore city, Maryland" = "Baltimore",
  "Suffolk County, Massachusetts" = "Boston",
  "Wayne County, Michigan" = "Detroit",
  "Essex County, New Jersey" = "Northern New Jersey",
  "New York County, New York" = "Manhattan",
  "Mecklenburg County, North Carolina" = "Charlotte",
  "Wake County, North Carolina" = "Raleigh/Durham",
  "Philadelphia County, Pennsylvania" = "Philadelphia",
  "Davidson County, Tennessee" = "Nashville",
  "Dallas County, Texas" = "Dallas/Ft Worth",
  "Harris County, Texas" = "Houston",
  "Tarrant County, Texas" = "Dallas/Ft Worth",
  "Travis County, Texas" = "Austin",
  "Salt Lake County, Utah" = "Salt Lake City",
  "Fairfax County, Virginia" = "Northern Virginia",
  "King County, Washington" = "Seattle"
)

# Add a new column to tech dataframe with the matched city based on county
business <- business %>%
  mutate(city = county_to_city[business$location])


```



```{r}
leases |>
  filter(internal_industry%in%c("Technology, Advertising, Media, and Information", "Business, Professional, and Consulting Services (except Financial and Legal) - Including Accounting")) |>
  group_by(internal_industry, market) |>
  count()
```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Simulate the data for the two types of companies (business/consulting and tech)
set.seed(123)

# Income range (for simplicity, I'm assuming a range from 30k to 150k)
income_range <- seq(30000, 150000, by = 1000)

# Business/Managerial/Consulting companies: 17% increase in leases per 10k increase in income
business_lease <- 1000 * (1.17)^(income_range / 10000)

# Tech companies: 7% decrease in leases per 10k increase in income
tech_lease <- 1000 * (1 - 0.07)^(income_range / 10000)

# Create a data frame
data <- data.frame(
  income = rep(income_range, 2),
  leases = c(business_lease, tech_lease),
  company_type = rep(c("Business/Consulting", "Tech"), each = length(income_range))
)

# Define custom colors using the provided hex codes
custom_colors <- c("Business/Consulting" = "#409D8F", "Tech" = "#DF6E4C")

# Plot
ggplot(data, aes(x = income, y = leases, color = company_type)) +
  geom_line(size = 1.2) +  # Line plot for leases
  geom_jitter(width = 1000, height = 1000, alpha = 0.6, size = 2) +  # Add jittered points with some random scatter
  facet_wrap(~ company_type, scales = "free_y") +  # Facet by company type
  scale_x_continuous(labels = scales::comma) +
  scale_color_manual(values = custom_colors) +
  labs(
    x = "Income ($)",
    y = "Number of Leases",
    caption = "Based on Poisson Regression"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(face = "bold"),
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 12),
    legend.position = "none",  # Remove legend since we have facet labels
    plot.background = element_rect(fill = "white")  # Clean background
  )

```


```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Simulate the data for the two types of companies (business/consulting and tech)
set.seed(123)

# Income range (for simplicity, I'm assuming a range from 30k to 150k)
income_range <- seq(30000, 150000, by = 1000)

# Business/Managerial/Consulting companies: 17% increase in leases per 10k increase in income
business_lease <- 1000 * (1.17)^(income_range / 10000)

# Tech companies: 7% decrease in leases per 10k increase in income
tech_lease <- 1000 * (1 - 0.07)^(income_range / 10000)

# Create a data frame
data <- data.frame(
  income = rep(income_range, 2),
  leases = c(business_lease, tech_lease),
  company_type = rep(c("Business/Consulting", "Tech"), each = length(income_range))
)

# Subset the data to select only 20 points from each company type
data_subset <- data %>%
  group_by(company_type) %>%
  sample_n(20)  # Take a random sample of 20 points for each company type

# Define custom colors using the provided hex codes
custom_colors <- c("Business/Consulting" = "#409D8F", "Tech" = "#DF6E4C")

# Plot
ggplot(data_subset, aes(x = income, y = leases, color = company_type)) +
  geom_line(size = 1.2) +  # Line plot for leases
  geom_jitter(width = 1000, height = 1000, alpha = 0.6, size = 2) +  # Add jittered points with some random scatter
  facet_wrap(~ company_type, scales = "free_y") +  # Facet by company type
  scale_x_continuous(labels = scales::comma) +
  scale_color_manual(values = custom_colors) +
  labs(
    x = "Income ($)",
    y = "Number of Leases",
    caption = "Based on Poisson Regression"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(face = "bold"),
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 12),
    legend.position = "none",  # Remove legend since we have facet labels
    axis.text.y = element_blank(),  # Remove y-axis labels
    plot.background = element_rect(fill = "white")  # Clean background
  )

```


```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Simulate the data for the two types of companies (business/consulting and tech)
set.seed(123)

# Income range (for simplicity, I'm assuming a range from 30k to 150k)
income_range <- seq(30000, 120000, by = 1000)

# Business/Managerial/Consulting companies: 17% increase in leases per 10k increase in income
business_lease <- 1000 * (1.17)^(income_range / 10000)

# Tech companies: 7% decrease in leases per 10k increase in income
tech_lease <- 1000 * (1 - 0.07)^(income_range / 10000)

# Create a data frame
data <- data.frame(
  income = rep(income_range, 2),
  leases = c(business_lease, tech_lease),
  company_type = rep(c("Business/Consulting", "Tech"), each = length(income_range))
)

# Subset the data to select only 20 points from each company type
data_subset <- data %>%
  group_by(company_type) %>%
  sample_n(20)  # Take a random sample of 20 points for each company type

# Define custom colors using the provided hex codes
custom_colors <- c("Business/Consulting" = "#409D8F", "Tech" = "#DF6E4C")

# Plot
ggplot(data_subset, aes(x = income, y = leases, color = company_type)) +
  geom_line(size = 1.2) +  # Line plot for leases
  geom_jitter(width = 1000, height = 1000, alpha = 0.6, size = 2) +  # Add jittered points with some random scatter
  facet_wrap(~ company_type, scales = "free_y") +  # Facet by company type
  scale_x_continuous(labels = scales::comma) +
  scale_color_manual(values = custom_colors) +
  labs(
    x = "Income ($)",
    y = "Number of Leases",
    caption = "Based on Poisson Regression"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(face = "bold"),
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 12),
    legend.position = "none",  # Remove legend since we have facet labels
    axis.text.y = element_blank(),  # Remove y-axis labels
    plot.background = element_rect(fill = "white"),  # Clean background
    panel.border = element_blank()  # Remove the border around the plot
  )

```





```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Simulate the data for the two types of companies (business/consulting and tech)
set.seed(123)

# Income range (for simplicity, I'm assuming a range from 30k to 150k)
income_range <- seq(30000, 150000, by = 1000)

# Business/Managerial/Consulting companies: 17% increase in leases per 10k increase in income
business_lease <- 1000 * (1.17)^(income_range / 10000)

# Tech companies: 7% decrease in leases per 10k increase in income
tech_lease <- 1000 * (1 - 0.07)^(income_range / 10000)

# Create a data frame
data <- data.frame(
  income = rep(income_range, 2),
  leases = c(business_lease, tech_lease),
  company_type = rep(c("Business/Consulting", "Tech"), each = length(income_range))
)

# Subset the data to select only 20 points from each company type
data_subset <- data %>%
  group_by(company_type) %>%
  sample_n(20)  # Take a random sample of 20 points for each company type

# Define custom colors using the provided hex codes
custom_colors <- c("Business/Consulting" = "#409D8F", "Tech" = "#DF6E4C")

# Plot
ggplot(data_subset, aes(x = income, y = leases, color = company_type)) +
  geom_line(size = 1.2) +  # Line plot for leases
  geom_jitter(width = 1000, height = 1000, alpha = 0.6, size = 2) +  # Add jittered points with some random scatter
  facet_wrap(~ company_type, scales = "free_y") +  # Facet by company type
  scale_x_continuous(labels = scales::comma) +
  scale_y_continuous(limits = c(0, 400)) +  # Limit y-axis to 400
  scale_color_manual(values = custom_colors) +
  labs(
    x = "Income ($)",
    y = "Number of Leases",
    caption = "Based on Poisson Regression"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(face = "bold"),
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 12),
    legend.position = "none",  # Remove legend since we have facet labels
    plot.background = element_rect(fill = "white")  # Clean background
  )

```


```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Simulate the data for the two types of companies (business/consulting and tech)
set.seed(123)

# Income range (for simplicity, I'm assuming a range from 30k to 150k)
income_range <- seq(30000, 150000, by = 1000)

# Business/Managerial/Consulting companies: 17% increase in leases per 10k increase in income
business_lease <- 1000 * (1.17)^(income_range / 10000)

# Tech companies: 7% decrease in leases per 10k increase in income
tech_lease <- 1000 * (1 - 0.07)^(income_range / 10000)

# Create a data frame
data <- data.frame(
  income = rep(income_range, 2),
  leases = c(business_lease, tech_lease),
  company_type = rep(c("Business/Consulting", "Tech"), each = length(income_range))
)

# Define custom colors using the provided hex codes
custom_colors <- c("Business/Consulting" = "#409D8F", "Tech" = "#DF6E4C")

# Plot
ggplot(data, aes(x = income, y = leases, color = company_type)) +
  geom_line(size = 1.2) + 
  geom_jitter() +# Line plot for leases
  facet_wrap(~ company_type, scales = "free_y") +  # Facet by company type
  scale_x_continuous(labels = scales::comma) +
  scale_color_manual(values = custom_colors) +
  labs(
    x = "Income ($)",
    y = "Number of Leases",
    caption = "based on Poisson Regression"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(face = "bold"),
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 12),
    legend.position = "none"  # Remove legend since we have facet labels
  )

```

```{r}
# Join your data with the shapefile
map_df <- counties_sf %>%
  left_join(tech, by = "GEOID") %>%
  filter(!is.na(income))  # filter only counties in your data

# Custom blue shades for the gradient
blue_shades <- c("#A1B6D7", "#7E97C1", "#5B7EAB", "#4059AD")  # Lighter to darker blue

# Plot with bolded black titles and labels
ggplot(map_df) +
  geom_sf(aes(fill = income), color = NA) +
  scale_fill_gradientn(colors = blue_shades, name = "Income", na.value = "grey90") +  # Using custom blue gradient
  theme_minimal(base_size = 15) +  # Set base size for consistency
  labs(
    title = "Income by County", 
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme(
    plot.title = element_text(face = "bold", size = 20, color = "black", hjust = 0.5),
    plot.subtitle = element_text(face = "bold", size = 14, color = "black", hjust = 0.5),
    plot.caption = element_text(face = "bold", size = 10, color = "black", hjust = 1),
    axis.text = element_blank(),  # Removing axis text
    axis.title = element_blank(),  # Removing axis titles
    legend.title = element_text(face = "bold", color = "black"),
    legend.text = element_text(color = "black"),
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10),  # Add some space around the plot
    plot.background = element_rect(fill = "white")  # Clean white background
  )

```

```{r}
# Join your data with the shapefile
map_df <- counties_sf %>%
  left_join(tech, by = "GEOID") %>%
  filter(!is.na(income))  # filter only counties in your data

# Dramatic blue gradient shades
blue_shades <- c("#D0D9E9", "#A1B6D7", "#7E97C1", "#5B7EAB", "#3F6F99", "#2E4C7A", "#1F3C5D")  # Light to dark blue

# Plot with bolded black titles and labels
ggplot(map_df) +
  geom_sf(aes(fill = income), color = NA) +
  scale_fill_gradientn(colors = blue_shades, name = "Income", na.value = "grey90") +  # Using dramatic blue gradient
  theme_minimal(base_size = 15) +  # Set base size for consistency
  labs(
    caption = "Data source: US Census Bureau"
  ) +
  theme(
    plot.title = element_text(face = "bold", size = 20, color = "black", hjust = 0.5),
    plot.subtitle = element_text(face = "bold", size = 14, color = "black", hjust = 0.5),
    plot.caption = element_text(face = "bold", size = 10, color = "black", hjust = 1),
    axis.text = element_blank(),  # Removing axis text
    axis.title = element_blank(),  # Removing axis titles
    legend.title = element_text(face = "bold", color = "black"),
    legend.text = element_text(color = "black"),
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10),  # Add some space around the plot
    plot.background = element_rect(fill = "white")  # Clean white background
  )

```



