---
title: "Idea 2"
author: "Sonya Eason"
format: pdf
editor: visual
---


```{r}
library(tidyverse)
library(patchwork)
library(lmerTest)
library(knitr)
library(broom)
```



```{r}
unemployment <- read_csv("data/Unemployment.csv")
price <- read_csv("data/Price and Availability Data.csv")
occupancy <- read_csv("data/Major Market Occupancy Data-revised.csv")
leases <- read_csv("data/Leases.csv")
income <- read_csv("data/ACSST5Y2023.S2411-Data.csv", skip = 1)
```

```{r}
# Filter columns whose names contain the word "computer" (case-insensitive)
income_filtered <- income[, grep("Computer", names(income), ignore.case = TRUE)]

# View the filtered dataframe
head(income_filtered)

cs <- income_filtered[,1]

tech <- data.frame(location = income$`Geographic Area Name`, income = cs)

colnames(tech)[2] <- "income"

```

```{r}
library(dplyr)

tech$GEOID <- c(
  "04013", "06037", "06059", "06073", "06075", "06085", "08031", "11001",
  "12057", "12086", "13121", "17031", "24017", "24510", "25025", "26163",
  "34013", "36061", "37119", "37183", "42101", "47037", "48113", "48201",
  "48439", "48453", "49035", "51059", "53033"
)

```
```{r}
library(tigris)
library(sf)
library(dplyr)
library(ggplot2)
library(stringr)
```

```{r}
library(sf)


shapefile_path <- "data/cb_2022_us_county_5m.shp"
counties_sf <- st_read(shapefile_path)

```

```{r}

# Join your data with the shapefile
map_df <- counties_sf %>%
  left_join(tech, by = "GEOID") %>%
  filter(!is.na(income)) # filter only counties in your data

# Plot
ggplot(map_df) +
  geom_sf(aes(fill = income), color = NA) +
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90") +
  theme_minimal() +
  labs(title = "Income by County", subtitle = "Tech-focused counties in the US")
```


```{r}
# Join your data with the shapefile
map_df <- counties_sf %>%
  left_join(tech, by = "GEOID") %>%
  filter(!is.na(income))  # filter only counties in your data

# Plot with bolded black titles and labels
ggplot(map_df) +
  geom_sf(aes(fill = income), color = NA) +
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90") +
  theme_minimal(base_size = 15) +  # Set base size for consistency
  labs(
    title = "Income by County", 
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme(
    plot.title = element_text(face = "bold", size = 20, color = "black", hjust = 0.5),
    plot.subtitle = element_text(face = "bold", size = 14, color = "black", hjust = 0.5),
    plot.caption = element_text(face = "bold", size = 10, color = "black", hjust = 1),
    axis.text = element_blank(),  # Removing axis text
    axis.title = element_blank(),  # Removing axis titles
    legend.title = element_text(face = "bold", color = "black"),
    legend.text = element_text(color = "black"),
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10),  # Add some space around the plot
    plot.background = element_rect(fill = "white")  # Clean white background
  )



```



```{r}
ggplot(map_df) +
  geom_sf(aes(fill = income), color = "white", size = 0.1) +  # Adding borders with white color
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90") +  # Better color scale
  labs(
    title = "Income by County",
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme_minimal(base_size = 15) +  # Bigger font size for better readability
  theme(
    plot.title = element_text(face = "bold", size = 20, hjust = 0.5, color = "darkblue"),
    plot.subtitle = element_text(size = 14, hjust = 0.5, color = "darkblue"),
    plot.caption = element_text(size = 10, hjust = 1, color = "gray50"),
    axis.text = element_blank(),
    axis.title = element_blank(),
    legend.position = "bottom",  # Move the legend to the bottom
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 12),
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10)  # Add some space around the plot
  ) +
  # Add a border around the plot
  coord_sf() +
  theme(plot.background = element_rect(fill = "white"))
```

```{r}
ggplot(map_df) +
  geom_sf(aes(fill = income), color = "white", size = 0.1) +  # Adding borders with white color
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90") +  # Better color scale
  labs(
    title = "Income by County",
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme_minimal(base_size = 15) +  # Bigger font size for better readability
  theme(
    plot.title = element_text(face = "bold", size = 20, hjust = 0.5, color = "darkblue"),
    plot.subtitle = element_text(size = 14, hjust = 0.5, color = "darkblue"),
    plot.caption = element_text(size = 10, hjust = 1, color = "gray50"),
    axis.text = element_blank(),
    axis.title = element_blank(),
    legend.position = "bottom",  # Move the legend to the bottom
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 12, angle = 45),  # Tilt legend labels by 45 degrees
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10)  # Add some space around the plot
  ) +
  # Add a border around the plot
  coord_sf() +
  theme(plot.background = element_rect(fill = "white"))

```





```{r}
ggplot(map_df) +
  geom_sf(aes(fill = income), color = "white", size = 0.1) +  # Adding borders with white color
  scale_fill_viridis_c(option = "plasma", name = "Income", na.value = "grey90", 
                       limits = c(min(map_df$income, na.rm = TRUE), max(map_df$income, na.rm = TRUE)),
                       oob = scales::squish) +  # Adjust color limits and squish outliers
  labs(
    title = "Income by County",
    subtitle = "Tech-focused counties in the US",
    caption = "Data source: US Census Bureau"
  ) +
  theme_minimal(base_size = 15) +  # Bigger font size for better readability
  theme(
    plot.title = element_text(face = "bold", size = 20, hjust = 0.5, color = "darkblue"),
    plot.subtitle = element_text(size = 14, hjust = 0.5, color = "darkblue"),
    plot.caption = element_text(size = 10, hjust = 1, color = "gray50"),
    axis.text = element_blank(),
    axis.title = element_blank(),
    legend.position = "bottom",  # Move the legend to the bottom
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 12),
    panel.grid = element_blank(),  # Remove gridlines for a cleaner look
    plot.margin = margin(10, 10, 10, 10),  # Add some space around the plot
    plot.background = element_rect(fill = "white")  # Clean white background
  ) +
  # Optionally add county labels to show income (you can remove or adjust this)
  geom_sf_text(aes(label = round(income, 0)), size = 3, color = "black", 
               fontface = "bold", check_overlap = TRUE) +
  coord_sf()

```



```{r}
biz_income_filtered <- income[, grep("Business", names(income), ignore.case = TRUE)]

# View the filtered dataframe
head(biz_income_filtered)

biz <- income_filtered[,1]
business <- data.frame(location = income$`Geographic Area Name`, income = biz)

colnames(business)[2] <- "income"

```

```{r}
library(dplyr)

# Mapping of counties to cities
county_to_city <- c(
  "Maricopa County, Arizona" = "Phoenix",
  "Los Angeles County, California" = "Los Angeles",
  "Orange County, California" = "Orange County",
  "San Diego County, California" = "San Diego",
  "San Francisco County, California" = "San Francisco",
  "Santa Clara County, California" = "South Bay/San Jose",
  "Denver County, Colorado" = "Denver",
  "District of Columbia, District of Columbia" = "Washington D.C.",
  "Hillsborough County, Florida" = "Tampa",
  "Miami-Dade County, Florida" = "South Florida",
  "Fulton County, Georgia" = "Atlanta",
  "Cook County, Illinois" = "Chicago",
  "Charles County, Maryland" = "Southern Maryland",
  "Baltimore city, Maryland" = "Baltimore",
  "Suffolk County, Massachusetts" = "Boston",
  "Wayne County, Michigan" = "Detroit",
  "Essex County, New Jersey" = "Northern New Jersey",
  "New York County, New York" = "Manhattan",
  "Mecklenburg County, North Carolina" = "Charlotte",
  "Wake County, North Carolina" = "Raleigh/Durham",
  "Philadelphia County, Pennsylvania" = "Philadelphia",
  "Davidson County, Tennessee" = "Nashville",
  "Dallas County, Texas" = "Dallas/Ft Worth",
  "Harris County, Texas" = "Houston",
  "Tarrant County, Texas" = "Dallas/Ft Worth",
  "Travis County, Texas" = "Austin",
  "Salt Lake County, Utah" = "Salt Lake City",
  "Fairfax County, Virginia" = "Northern Virginia",
  "King County, Washington" = "Seattle"
)

# Add a new column to tech dataframe with the matched city based on county
business <- business %>%
  mutate(city = county_to_city[business$location])


```


#industries 


```{r}
tech_markets <- inner_join(tech, markets, by = "city") |>
  mutate(incomeThousand = income/10000)
```




```{r}
markets <- leases |>
  group_by(market) |>
  summarize(
    city = first(market),
    count = n()
  )
```

```{r}
markets_specific <- leases |>
  filter(internal_industry == "Technology, Advertising, Media, and Information") |>
    group_by(market) |>
  summarize(
    city = first(market),
    count = n()
  )
```


```{r}
markets_business <- leases |>
  filter(internal_industry == "Business, Professional, and Consulting Services (except Financial and Legal) - Including Accounting") |>
    group_by(market) |>
  summarize(
    city = first(market),
    count = n()
  )
```



```{r}
bus_markets <- inner_join(business, markets_business, by= "city") |>
  mutate(incomeThousand = income/10000)
```

```{r}
tech_markets <- inner_join(tech, markets_specific, by = "city") |>
  mutate(incomeThousand = income/10000)
```

```{r}
pois <- glm(count ~ incomeThousand, family = poisson, data = tech_markets)
```


```{r}
poisBus <- glm(count ~ incomeThousand, family = poisson, data = bus_markets)
```

```{r}
ggplot(bus_markets, aes(x))
```





```{r}
summary(pois)
```
```{r}
exp(0.162999)
```



```{r}
summary(poisBus)
```


```{r}
exp(0.162999)

exp(0.072184)
```
For every 10,000 increase in income, the number of leases is expected to increase by 18% in a market!











the odds is expected to increase by 0.9419
```{r}
exp(-0.059838)
```




(do a couple other industries - more Poisson regression)









```{r}
mean_count <- mean(markets$count, na.rm = TRUE)
var_count <- var(markets$count, na.rm = TRUE)
```


Overdispersion ! 

```{r}

library(MASS)

```





```{r}
# Fit a negative binomial model to the data
model <- glm.nb(count ~ incomeThousand, data = tech_markets)

# Summary of the model
summary(model)

```

```{r}
exp(-0.03605)
```




```{r}
model <- glm.nb(count ~ incomeThousand, data = bus_markets)

```

The odds increases 


